// Template para debug visual da imagem
async function ensureImageInCache(imageUrl) {
  try {
    console.log('Fazendo fetch da imagem:', imageUrl);
    const response = await fetch(imageUrl);
    console.log('Response status:', response.status);
    
    if (response.ok) {
      const arrayBuffer = await response.arrayBuffer();
      const imageBytes = new Uint8Array(arrayBuffer);
      console.log('Imagem baixada, tamanho:', imageBytes.length, 'bytes');
      
      const image = figma.createImage(imageBytes);
      console.log('✅ Sucesso! Hash:', image.hash);
      return image.hash;
    }
  } catch (error) {
    console.log('❌ Erro ao cachear imagem:', error);
  }
  return null;
}

async function main() {
  console.log('=== INICIANDO DEBUG VISUAL ===');
  
  const imageUrl = "https://raw.githubusercontent.com/gustavocabraltv/templates-imgs/main/imagem.png";
  const imageHash = await ensureImageInCache(imageUrl);
  
  if (imageHash) {
    console.log('Hash obtido:', imageHash);
    
    // Criar múltiplos testes visuais
    console.log('Criando teste 1: Retângulo com imageHash');
    const rect1 = figma.createRectangle();
    figma.currentPage.appendChild(rect1);
    rect1.resize(300, 200);
    rect1.x = 0;
    rect1.y = 0;
    rect1.name = "Teste 1: Com imageHash";
    
    rect1.fills = [{
      type: "IMAGE",
      imageHash: imageHash,
      scaleMode: "FILL",
      visible: true,
      opacity: 1,
      blendMode: "NORMAL"
    }];
    
    console.log('Fills aplicados:', rect1.fills);
    
    // Teste 2: Diferentes scale modes
    console.log('Criando teste 2: ScaleMode FIT');
    const rect2 = figma.createRectangle();
    figma.currentPage.appendChild(rect2);
    rect2.resize(300, 200);
    rect2.x = 320;
    rect2.y = 0;
    rect2.name = "Teste 2: ScaleMode FIT";
    
    rect2.fills = [{
      type: "IMAGE",
      imageHash: imageHash,
      scaleMode: "FIT",
      visible: true,
      opacity: 1
    }];
    
    // Teste 3: ScaleMode CROP
    console.log('Criando teste 3: ScaleMode CROP');
    const rect3 = figma.createRectangle();
    figma.currentPage.appendChild(rect3);
    rect3.resize(300, 200);
    rect3.x = 0;
    rect3.y = 220;
    rect3.name = "Teste 3: ScaleMode CROP";
    
    rect3.fills = [{
      type: "IMAGE",
      imageHash: imageHash,
      scaleMode: "CROP",
      visible: true,
      opacity: 1
    }];
    
    // Teste 4: Elipse com imagem
    console.log('Criando teste 4: Elipse');
    const ellipse = figma.createEllipse();
    figma.currentPage.appendChild(ellipse);
    ellipse.resize(200, 200);
    ellipse.x = 320;
    ellipse.y = 220;
    ellipse.name = "Teste 4: Elipse";
    
    ellipse.fills = [{
      type: "IMAGE",
      imageHash: imageHash,
      scaleMode: "FILL"
    }];
    
    // Teste 5: Frame em vez de retângulo
    console.log('Criando teste 5: Frame');
    const frame = figma.createFrame();
    figma.currentPage.appendChild(frame);
    frame.resize(300, 200);
    frame.x = 0;
    frame.y = 440;
    frame.name = "Teste 5: Frame";
    
    frame.fills = [{
      type: "IMAGE",
      imageHash: imageHash,
      scaleMode: "FILL"
    }];
    
    // Criar indicador de sucesso
    const indicator = figma.createRectangle();
    figma.currentPage.appendChild(indicator);
    indicator.resize(100, 30);
    indicator.x = 320;
    indicator.y = 440;
    indicator.fills = [{ type: "SOLID", color: { r: 0, g: 1, b: 0 } }];
    indicator.name = "✅ HASH FUNCIONOU";
    
    console.log('Todos os testes criados! Verifique visualmente.');
    
  } else {
    console.log('❌ Falha ao obter hash');
    
    const errorRect = figma.createRectangle();
    figma.currentPage.appendChild(errorRect);
    errorRect.resize(400, 100);
    errorRect.fills = [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }];
    errorRect.name = "❌ ERRO - SEM HASH";
  }
  
  console.log('=== DEBUG FINALIZADO ===');
}

main();