// card-basic.ts.txt com GitHub
async function ensureImageInCache(imageUrl) {
  try {
    console.log('Fazendo fetch da imagem:', imageUrl);
    const response = await fetch(imageUrl);
    console.log('Response status:', response.status);
    
    if (response.ok) {
      const arrayBuffer = await response.arrayBuffer();
      const imageBytes = new Uint8Array(arrayBuffer);
      console.log('Imagem baixada, tamanho:', imageBytes.length, 'bytes');
      
      const image = figma.createImage(imageBytes);
      console.log('Imagem criada, hash:', image.hash);
      return image.hash;
    } else {
      console.log('Erro na resposta:', response.statusText);
    }
  } catch (error) {
    console.log('Erro ao cachear imagem:', error);
  }
  return null;
}

async function main() {
  // URL correta do GitHub (raw)
  const imageConfig = {
    url: "https://raw.githubusercontent.com/gustavocabraltv/templates-imgs/main/imagem.png",
    fallbackHash: "fb8941a46766160ef7dce5fcc76d4409f4f378fa"
  };

  console.log('=== Iniciando carregamento da imagem ===');
  const imageHash = await ensureImageInCache(imageConfig.url) || imageConfig.fallbackHash;
  console.log('Hash final da imagem:', imageHash);

  // Criar retângulo
  const rectangle_3_23 = figma.createRectangle();
  figma.currentPage.appendChild(rectangle_3_23);
  rectangle_3_23.resize(2038.0000000000, 2560.0000000000);
  rectangle_3_23.name = "imagem";
  
  console.log('Aplicando imagem ao retângulo...');
  rectangle_3_23.fills = [{
    "type": "IMAGE",
    "visible": true,
    "opacity": 1,
    "blendMode": "NORMAL",
    "scaleMode": "FILL",
    "imageTransform": [[1,0,0],[0,1,0]],
    "scalingFactor": 0.5,
    "rotation": 0,
    "filters": {
      "exposure": 0,
      "contrast": 0,
      "saturation": 0,
      "temperature": 0,
      "tint": 0,
      "highlights": 0,
      "shadows": 0
    },
    "imageHash": imageHash
  }];
  
  rectangle_3_23.relativeTransform = [[1,0,-1355],[0,1,-3879]];
  rectangle_3_23.x = -1355;
  rectangle_3_23.y = -3879;
  rectangle_3_23.constrainProportions = true;
  rectangle_3_23.strokeTopWeight = 1;
  rectangle_3_23.strokeBottomWeight = 1;
  rectangle_3_23.strokeLeftWeight = 1;
  rectangle_3_23.strokeRightWeight = 1;
  
  console.log('=== Template finalizado ===');
}

main();